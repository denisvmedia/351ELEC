#!/bin/bash
# SPDX-License-Identifier: GPL-2.0-or-later
# Copyright (C) 2020-present Fewtarius

. /etc/profile

### Modifiable variables
USTAGE="/storage/roms/update"
PREFIX="351ELEC-RG351P.aarch64"
MYVERSION=$(cat /storage/.config/EE_VERSION)
VERBOSE=true
BAND=$(get_ee_setting updates.type)

### Functions Library

if [ "${BAND}" == "nightly" ]
then
  REPO="https://updates.351elec.org/releases/nightly"
  PROVIDER="https"
elif [ "${BAND}" == "rc" ]
then
  REPO="https://updates.351elec.org/releases/rc"
  PROVIDER="https"
else
  API="https://api.github.com/repos/fewtarius/351elec"
  REPO="https://github.com/fewtarius/351ELEC"
  PROVIDER="git"
fi

if [ -e "${USTAGE}/update.log" ]
then
  rm "${USTAGE}/update.log"
fi

function getlatest() {
  if [ "${PROVIDER}" == "https" ]
  then
    ### Clean this up later.
    LATEST=$(curl -sL ${REPO} | grep -o '<a .*href=.*>' | sed -e 's/<a /\n<a /g' | sed -e 's/<a .*href=['"'"'"]//' -e 's/["'"'"'].*$//' -e '/^$/ d' | sed -e 's#/.*$##g' | grep '^[0-9]' | sort | tail -n 1) 
    TAG=$(curl -sL ${REPO}/${LATEST}/aarch64/RG351P | grep -o '<a .*href=.*>' | sed -e 's/<a /\n<a /g' | sed -e 's/<a .*href=['"'"'"]//' -e 's/["'"'"'].*$//' -e '/^$/ d' | sed -e 's#/.*$##g' | grep '^[0-9]' | sort | tail -n 1 | cut -d"-" -f 3 | cut -d"." -f 1,2,3)
    REPO="${REPO}/${LATEST}/aarch64/RG351P"
    UFILE="${PREFIX}-${TAG}.tar"
  elif [ "${PROVIDER}" == "git" ]
  then
    TAG=$(curl -Ls "${API}/releases" | python -c "import sys, json; print(json.load(sys.stdin)[0]['tag_name'])")
    REPO="${REPO}/releases/download/${TAG}"
    UFILE="${PREFIX}-${TAG}.tar"
  fi
}

function log () {
  echo "$(date): $1" | tee -a "${USTAGE}/update.log"
}

function online_status() {
  GW=$(ip route | awk '/eth0/ {a=$0} END{print $1}')
  if [[ ${GW} =~ [0-9] ]]
  then
    echo true
  else
    echo false
  fi
}

function hash() {
  while true
  do
    echo -n "#" >/dev/console
    sleep 1
  done
}

### Main

systemctl stop emustation

clear >/dev/console
/usr/bin/show_splash.sh "$0"
clear >/dev/console

if [ ! -d "${USTAGE}" ]
then
  mkdir -p "${USTAGE}"
fi

message_stream "Starting \e[31m351\e[39mELEC Update - Checking For Updates\n" .02

NETWORKING=$(online_status)
if [ "${NETWORKING}" == true ]
then
  $VERBOSE && log "Network connection detected"
  message_stream "\n\nChecking for updates in the ${BAND} band..." .02
  getlatest
else
  $VERBOSE && log "No network connection detected"
  if [ -e "${USTAGE}/${UFILE}" ]
  then
    $VERBOSE && log "Local update package found"
    TAG=$(echo ${UFILE} | awk 'BEGIN {FS="-"}; {split($3, a, /.tar/); print a[1]}')
  fi
fi

if [ "${BAND}" == "stable" ] && [ "${MYVERSION}" == "${TAG}" ]
then
  UPDATE=false
else
  UPDATE=true
fi

if [ "${UPDATE}" == false ]
then
  $VERBOSE && log "No update available ${MYVERSION} = ${TAG}"
  message_stream "\n\nVersion ${TAG} is already installed, nothing to do..." .02
  sleep 4
  clear >/dev/console
  systemctl start emustation
  exit 0
else
  $VERBOSE && log "Update available ${MYVERSION} -> ${TAG}"
  
fi

if [ ! -e "${USTAGE}/${UFILE}" ] && [ ! -e "${USTAGE}/${UFILE}.sha256" ]
then
  if [ "${NETWORKING}" == true ]
  then
    $VERBOSE && log "Fetching ${UFILE} from ${REPO}"

    message_stream "\n\nFetching ${UFILE}...\n" .02
    hash &
    CHILD_PID=$!
    curl -Lo "${USTAGE}/${UFILE}" "${REPO}/${UFILE}" &>>${USTAGE}/update.log
    kill ${CHILD_PID}
    message_stream "\n\nFetching Checksum...\n" .02
    hash &
    CHILD_PID=$!
    curl -Lo "${USTAGE}/${UFILE}.sha256" "${REPO}/${UFILE}.sha256"  &>>${USTAGE}/update.log
    kill ${CHILD_PID}
    message_stream "\n" .02
  else
    $VERBOSE && log "No network connection available"
    message_stream "\n\nNetwork connection not detected, cannot continue..." .02
    exit 0
  fi
else
  $VERBOSE && log "Local update found"
  message_stream "\n\nLocal update found..." .02
fi

$VERBOSE && log "Verifying ${UFILE}"
message_stream "\nVerifying package..." .02
MYSUM=$(sha256sum ${USTAGE}/${UFILE} | awk '{print $1}')
DLSUM=$(cat ${USTAGE}/${UFILE}.sha256 | awk '{print $1}')

if [ ! "${MYSUM}" == "${DLSUM}" ]
then
  $VERBOSE && log "Verification failed: ${MYSUM} == ${DLSUM}"
  message_stream "\nVerification failed, not updating..." .02
  sleep 4
  clear >/dev/console
  systemctl start emustation
  exit 1
else
  message_stream "\nVerification successful..." .02
fi

$VERBOSE && log "Syncing..."
message_stream "\n\nRebooting to continue update..." .02
sync
$VERBOSE && log "rebooting.."
reboot

